{"version":3,"sources":["StreamlitVisGraph.tsx","index.tsx"],"names":["StreamlitVisGraph","StreamlitComponentBase","constructor","arguments","render","graph","JSON","parse","this","props","args","nodes","slice","i","length","title","div","htmlTitle","options","events","selectNode","event","Streamlit","setComponentValue","doubleClick","console","log","link","lookup_node","mynodes","node","id","lookup_node_id","innerHTML","window","open","_jsx","children","VisGraph","getNetwork","network","html","container","document","createElement","withStreamlitConnection","ReactDOM","React","StrictMode","StreamlitProvider","getElementById"],"mappings":"qMASA,MAAMA,UAA0BC,yBAAuBC,cAAA,SAAAC,WAAA,KAE9CC,OAAS,KASd,IAAIC,EAAQC,KAAKC,MAAMC,KAAKC,MAAMC,KAAW,MAEzCC,EAAQN,EAAMM,MAAMC,QAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC7BF,EAAME,GAAGE,QACVJ,EAAME,GAAGG,IAAMR,KAAKS,UAAUN,EAAME,GAAGE,QAG3C,MAAMG,EAAUZ,KAAKC,MAAMC,KAAKC,MAAMC,KAAa,QAE7CS,EAAS,CAEbC,WAAaC,IACXC,YAAUC,kBAAkBF,EAAMV,MAAM,GAAG,EAG7Ca,YAAcH,IACZI,QAAQC,IAAIL,EAAMV,OAElB,IACIgB,EA5BR,SAAwBC,EAAaC,GACnC,IAAK,IAAIC,KAAQD,EACb,GAAIC,EAAKC,KAAOH,EACZ,OAAOE,CAEhB,CAsBqBE,CAAeX,EAAMV,MAAM,GAAIA,GAC1BK,IAAIiB,UACxBN,GACDO,OAAOC,KAAKR,EACd,GAGJ,OACES,cAAA,QAAAC,SAEAD,cAACE,IAAQ,CACTjC,MAAOA,EACPa,QAASA,EACTC,OAAQA,EACRoB,WAAaC,SAIN,EAEV,KAEOvB,UAAawB,IACnB,MAAMC,EAAYC,SAASC,cAAc,OAEzC,OADAF,EAAUT,UAAYQ,EACfC,CAAS,CACjB,EAGYG,wCAAwB7C,GC/DvC8C,IAAS1C,OACPgC,cAACW,IAAMC,WAAU,CAAAX,SACfD,cAACa,oBAAiB,CAAAZ,SAChBD,cAACpC,EAAiB,QAGtB2C,SAASO,eAAe,Q","file":"static/js/main.06eca4f8.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport VisGraph from 'react-vis-graph-wrapper';\n\n\nclass StreamlitVisGraph extends StreamlitComponentBase {\n\n  public render = (): ReactNode => {\n\n    function lookup_node_id(lookup_node, mynodes){\n      for (let node of mynodes){\n          if (node.id === lookup_node){\n              return node;\n          }\n    }}\n\n    var graph = JSON.parse(this.props.args[\"data\"]);\n    \n    var nodes = graph.nodes.slice();\n\n    for (let i = 0; i < nodes.length; i++) {\n      if(nodes[i].title)\n        nodes[i].div = this.htmlTitle(nodes[i].title);\n    }\n  \n    const options = JSON.parse(this.props.args[\"config\"]);\n\n    const events = {\n\n      selectNode: (event:any) => {\n        Streamlit.setComponentValue(event.nodes[0]);\n      },\n\n      doubleClick: (event:any) => {\n        console.log(event.nodes);\n        // let link = nodes;\n        let lookup_node = lookup_node_id(event.nodes[0], nodes);\n        let link = lookup_node.div.innerHTML;\n        if(link){\n          window.open(link);\n        }\n      }\n    };\n    return (\n      <span>\n    \n      <VisGraph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={(network: any) => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n        //console.log(network);\n      }}/>\n      </span>\n    )\n  }\n\n  private htmlTitle = (html):any => {   \n    const container = document.createElement(\"div\");\n    container.innerHTML = html;\n    return container;\n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport StreamlitVisGraph from \"./StreamlitVisGraph\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <StreamlitVisGraph/>\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}