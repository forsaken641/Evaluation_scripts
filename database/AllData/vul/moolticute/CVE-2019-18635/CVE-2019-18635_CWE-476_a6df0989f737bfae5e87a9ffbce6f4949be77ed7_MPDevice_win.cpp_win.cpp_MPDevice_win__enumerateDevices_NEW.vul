QList<MPPlatformDef> MPDevice_win::enumerateDevices()
{
    HID.load();

    QList<MPPlatformDef> devlist;

    SP_DEVINFO_DATA devinfo_data;
    SP_DEVICE_INTERFACE_DATA dev_data;
    SP_DEVICE_INTERFACE_DETAIL_DATA_A *dev_detail_data = NULL;
    HDEVINFO dev_info_set = INVALID_HANDLE_VALUE;
    int idx = 0;

    ::ZeroMemory(&devinfo_data, sizeof(devinfo_data));
    devinfo_data.cbSize = sizeof(SP_DEVINFO_DATA);
    dev_data.cbSize = sizeof(SP_DEVICE_INTERFACE_DATA);

    //Get all devices from HID class
    dev_info_set = SetupDiGetClassDevsA(&IClassGuid, nullptr, nullptr, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);

    while (SetupDiEnumDeviceInterfaces(dev_info_set,
                                       nullptr,
                                       &IClassGuid,
                                       idx,
                                       &dev_data))
    {
        DWORD required_size = 0;

        //first call is to get the required_size
        bool ret = SetupDiGetDeviceInterfaceDetailA(dev_info_set,
                                                    &dev_data,
                                                    nullptr,
                                                    0,
                                                    &required_size,
                                                    nullptr);

        if (0 == required_size)
        {
            qCritical() << "Invalid DeviceInterfaceDetailData buffer size";
            continue;
        }

        //alloc data
        dev_detail_data = (SP_DEVICE_INTERFACE_DETAIL_DATA_A*) malloc(required_size);
        if (!dev_detail_data)
        {
            qCritical() << "Allocating SP_DEVICE_INTERFACE_DETAIL_DATA_A data failed.";
            break;
        }
        dev_detail_data->cbSize = sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA_A);

        //Get device info now
        ret = SetupDiGetDeviceInterfaceDetailA(dev_info_set,
                                               &dev_data,
                                               dev_detail_data,
                                               required_size,
                                               nullptr,
                                               nullptr);

        ++idx;
        if (!ret)
        {
            free(dev_detail_data);
            continue;
        }

        QString path = QString(dev_detail_data->DevicePath);
        free(dev_detail_data);

        bool isBLE = false;
        bool isBluetooth = false;
        if (!checkDevice(path, isBLE, isBluetooth))
        {
            continue;
        }
        qDebug() << "Found mooltipass: " << path;

        //TODO: extract interface number from path string and check it

        devlist << getPlatDef(path, isBLE, isBluetooth);
    }

    SetupDiDestroyDeviceInfoList(dev_info_set);

    return devlist;
}
