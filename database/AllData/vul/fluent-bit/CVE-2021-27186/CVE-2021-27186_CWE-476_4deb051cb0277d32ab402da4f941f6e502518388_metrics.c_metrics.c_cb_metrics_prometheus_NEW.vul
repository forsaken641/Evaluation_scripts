void cb_metrics_prometheus(mk_request_t *request, void *data)
{
    int i;
    int j;
    int m;
    int len;
    int time_len;
    int start_time_len;
    size_t index;
    size_t num_metrics = 0;
    long now;
    flb_sds_t sds;
    flb_sds_t sds_metric;
    flb_sds_t tmp_sds;
    struct flb_sds *metric_helptxt_head;
    flb_sds_t metric_helptxt;
    size_t off = 0;
    struct flb_hs_buf *buf;
    msgpack_unpacked result;
    msgpack_object map;
    char tmp[32];
    char time_str[64];
    char start_time_str[64];
    char* *metrics_arr;
    struct timeval tp;
    struct flb_hs *hs = data;
    struct flb_config *config = hs->config;

    buf = metrics_get_latest();
    if (!buf) {
        mk_http_status(request, 404);
        mk_http_done(request);
        return;
    }

    /* ref count */
    buf->users++;

    /* Compose outgoing buffer string */
    sds = flb_sds_create_size(1024);
    if (!sds) {
        mk_http_status(request, 500);
        mk_http_done(request);
        buf->users--;
        return;
    }

    /* length of HELP text */
    metric_helptxt = flb_sds_create_size(128);
    if (!metric_helptxt) {
        flb_sds_destroy(sds);
        mk_http_status(request, 500);
        mk_http_done(request);
        buf->users--;
        return;
    }
    metric_helptxt_head = FLB_SDS_HEADER(metric_helptxt);

    /* current time */
    gettimeofday(&tp, NULL);
    now = tp.tv_sec * 1000 + tp.tv_usec / 1000;
    time_len = snprintf(time_str, sizeof(time_str) - 1, "%lu", now);
    start_time_len = snprintf(start_time_str, sizeof(start_time_str) - 1, "%lu", config->init_time);

    /*
     * fluentbit_input_records[name="cpu0", hostname="${HOSTNAME}"] NUM TIMESTAMP
     * fluentbit_input_bytes[name="cpu0", hostname="${HOSTNAME}"] NUM TIMESTAMP
     */
    index = 0;
    msgpack_unpacked_init(&result);
    msgpack_unpack_next(&result, buf->raw_data, buf->raw_size, &off);
    map = result.data;

    /* we need to know number of exposed metrics to reserve a memory */
    for (i = 0; i < map.via.map.size; i++) {
        msgpack_object v = map.via.map.ptr[i].val;
        /* Iterate sub-map */
        for (j = 0; j < v.via.map.size; j++) {
            msgpack_object sv = v.via.map.ptr[j].val;
            for (m = 0; m < sv.via.map.size; m++) {
                num_metrics++;
            }
        }
    }
    metrics_arr = flb_malloc(num_metrics * sizeof(char*));
    if (!metrics_arr) {
        flb_errno();

        mk_http_status(request, 500);
        mk_http_done(request);
        buf->users--;

        flb_sds_destroy(sds);
        flb_sds_destroy(metric_helptxt);
        msgpack_unpacked_destroy(&result);
        return;
    }

    for (i = 0; i < map.via.map.size; i++) {
        msgpack_object k;
        msgpack_object v;

        /* Keys: input, output */
        k = map.via.map.ptr[i].key;
        v = map.via.map.ptr[i].val;

        /* Iterate sub-map */
        for (j = 0; j < v.via.map.size; j++) {
            msgpack_object sk;
            msgpack_object sv;

            /* Keys: plugin name , values: metrics */
            sk = v.via.map.ptr[j].key;
            sv = v.via.map.ptr[j].val;

            for (m = 0; m < sv.via.map.size; m++) {
                msgpack_object mk;
                msgpack_object mv;

                mk = sv.via.map.ptr[m].key;
                mv = sv.via.map.ptr[m].val;

                /* Convert metric value to string */
                len = snprintf(tmp, sizeof(tmp) - 1, "%" PRIu64 " ", mv.via.u64);
                if (len < 0) {
                    goto error;
                }

                /* Allocate buffer */
                sds_metric = flb_sds_create_size(k.via.str.size
                                                 + mk.via.str.size
                                                 + sk.via.str.size
                                                 + len + time_len + 28);
                if (sds_metric == NULL) {
                    goto error;
                }

                sds_metric = flb_sds_cat(sds_metric, "fluentbit_", 10);
                sds_metric = flb_sds_cat(sds_metric, k.via.str.ptr, k.via.str.size);
                sds_metric = flb_sds_cat(sds_metric, "_", 1);
                sds_metric = flb_sds_cat(sds_metric, mk.via.str.ptr, mk.via.str.size);
                sds_metric = flb_sds_cat(sds_metric, "_total{name=\"", 13);
                sds_metric = flb_sds_cat(sds_metric, sk.via.str.ptr, sk.via.str.size);
                sds_metric = flb_sds_cat(sds_metric, "\"} ", 3);
                sds_metric = flb_sds_cat(sds_metric, tmp, len);
                sds_metric = flb_sds_cat(sds_metric, time_str, time_len);
                sds_metric = flb_sds_cat(sds_metric, "\n", 1);
                metrics_arr[index] = sds_metric;
                index++;
            }
        }
    }

    /*  Sort metrics in alphabetic order, so we can group them later. */
    qsort(metrics_arr, num_metrics, sizeof(char *), string_cmp);

    /* When a new metric starts add HELP and TYPE annotation. */
    tmp_sds = flb_sds_cat(sds, "# HELP ", 7);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, metrics_arr[0], extract_metric_name_end_position(metrics_arr[0]));
    null_check(tmp_sds);
    if (!metrics_help_txt(metrics_arr[0], &metric_helptxt)) {
        goto error;
    }
    tmp_sds = flb_sds_cat(sds, metric_helptxt, metric_helptxt_head->len);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "# TYPE ", 7);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, metrics_arr[0], extract_metric_name_end_position(metrics_arr[0]));
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, " counter\n", 9);
    null_check(tmp_sds);

    for (i = 0; i < num_metrics; i++) {
        tmp_sds = flb_sds_cat(sds, metrics_arr[i], strlen(metrics_arr[i]));
        null_check(tmp_sds);
        if ((i != num_metrics - 1) && (is_same_metric(metrics_arr[i], metrics_arr[i+1]) == 0)) {
            tmp_sds = flb_sds_cat(sds, "# HELP ", 7);
            null_check(tmp_sds);
            tmp_sds = flb_sds_cat(sds, metrics_arr[i+1], extract_metric_name_end_position(metrics_arr[i+1]));
            null_check(tmp_sds);
            metric_helptxt_head->len = 0;
            if (!metrics_help_txt(metrics_arr[i+1], &metric_helptxt)) {
                goto error;
            }
            tmp_sds = flb_sds_cat(sds, metric_helptxt, metric_helptxt_head->len);
            null_check(tmp_sds);
            tmp_sds = flb_sds_cat(sds, "# TYPE ", 7);
            null_check(tmp_sds);
            tmp_sds = flb_sds_cat(sds, metrics_arr[i+1], extract_metric_name_end_position(metrics_arr[i+1]));
            null_check(tmp_sds);
            tmp_sds = flb_sds_cat(sds, " counter\n", 9);
            null_check(tmp_sds);
        }
    }
    /* Attach process_start_time_seconds metric. */
    tmp_sds = flb_sds_cat(sds, "# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n", 89);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "# TYPE process_start_time_seconds gauge\n", 40);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "process_start_time_seconds ", 27);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, start_time_str, start_time_len);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "\n", 1);
    null_check(tmp_sds);

    /* Attach fluentbit_build_info metric. */
    tmp_sds = flb_sds_cat(sds, "# HELP fluentbit_build_info Build version information.\n", 55);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "# TYPE fluentbit_build_info gauge\n", 34);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "fluentbit_build_info{version=\"", 30);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, FLB_VERSION_STR, sizeof(FLB_VERSION_STR) - 1);
    null_check(tmp_sds);
    tmp_sds = flb_sds_cat(sds, "\",edition=\"", 11);
    null_check(tmp_sds);
#ifdef FLB_ENTERPRISE
    tmp_sds = flb_sds_cat(sds, "Enterprise\"} 1\n", 15);
    null_check(tmp_sds);
#else
    tmp_sds = flb_sds_cat(sds, "Community\"} 1\n", 14);
    null_check(tmp_sds);
#endif

    msgpack_unpacked_destroy(&result);
    buf->users--;

    mk_http_status(request, 200);
    mk_http_header(request,
                   "Content-Type", 12,
                   PROMETHEUS_HEADER, sizeof(PROMETHEUS_HEADER) - 1);
    mk_http_send(request, sds, flb_sds_len(sds), NULL);
    for (i = 0; i < num_metrics; i++) {
      flb_sds_destroy(metrics_arr[i]);
    }
    flb_free(metrics_arr);
    flb_sds_destroy(sds);
    flb_sds_destroy(metric_helptxt);

    mk_http_done(request);
    return;

error:
    mk_http_status(request, 500);
    mk_http_done(request);
    buf->users--;

    for (i = 0; i < index; i++) {
      flb_sds_destroy(metrics_arr[i]);
    }
    flb_free(metrics_arr);
    flb_sds_destroy(sds);
    flb_sds_destroy(metric_helptxt);
    msgpack_unpacked_destroy(&result);
}
