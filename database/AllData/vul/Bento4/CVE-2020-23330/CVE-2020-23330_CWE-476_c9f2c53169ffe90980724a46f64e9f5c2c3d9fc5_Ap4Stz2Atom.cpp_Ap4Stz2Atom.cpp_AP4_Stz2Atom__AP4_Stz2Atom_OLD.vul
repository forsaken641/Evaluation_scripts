AP4_Stz2Atom::AP4_Stz2Atom(AP4_UI32        size, 
                           AP4_UI08        version,
                           AP4_UI32        flags,
                           AP4_ByteStream& stream) :
    AP4_Atom(AP4_ATOM_TYPE_STZ2, size, version, flags)
{
    AP4_UI08 reserved;
    stream.ReadUI08(reserved);
    stream.ReadUI08(reserved);
    stream.ReadUI08(reserved);
    stream.ReadUI08(m_FieldSize);
    stream.ReadUI32(m_SampleCount);
    if (m_FieldSize != 4 && m_FieldSize != 8 && m_FieldSize != 16) {
        // illegale field size
        return;
    }

    AP4_Cardinal sample_count = m_SampleCount;
    m_Entries.SetItemCount(sample_count);
    unsigned int table_size = (sample_count*m_FieldSize+7)/8;
    if ((table_size+8) > size) return;
    unsigned char* buffer = new unsigned char[table_size];
    AP4_Result result = stream.Read(buffer, table_size);
    if (AP4_FAILED(result)) {
        delete[] buffer;
        return;
    }
    switch (m_FieldSize) {
        case 4:
            for (unsigned int i=0; i<sample_count; i++) {
                if ((i%2) == 0) {
                    m_Entries[i] = (buffer[i/2]>>4)&0x0F;
                } else {
                    m_Entries[i] = buffer[i/2]&0x0F;
                }
            }
            break;

        case 8:
            for (unsigned int i=0; i<sample_count; i++) {
                m_Entries[i] = buffer[i];
            }
            break;

        case 16:
            for (unsigned int i=0; i<sample_count; i++) {
                m_Entries[i] = AP4_BytesToUInt16BE(&buffer[i*2]);
            }
            break;
    }
    delete[] buffer;
}
