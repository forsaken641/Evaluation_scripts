static void
startElement(struct solv_xmlparser *xmlp, int state, const char *name, const char **atts)
{
  struct parsedata *pd = xmlp->userdata;
  Pool *pool = pd->pool;
  Solvable *s = pd->solvable;

  switch(state)
    {
    case STATE_GROUP:
    case STATE_CATEGORY:
      s = pd->solvable = pool_id2solvable(pool, repo_add_solvable(pd->repo));
      pd->handle = s - pool->solvables;
      pd->kind = state == STATE_GROUP ? "group" : "category";
      break;

    case STATE_NAME:
    case STATE_CNAME:
    case STATE_DESCRIPTION:
    case STATE_CDESCRIPTION:
      pd->tmplang = join_dup(&pd->jd, solv_xmlparser_find_attr("xml:lang", atts));
      break;

    case STATE_PACKAGEREQ:
      {
	const char *type = solv_xmlparser_find_attr("type", atts);
	pd->condreq = 0;
	pd->reqtype = SOLVABLE_RECOMMENDS;
	if (type && !strcmp(type, "conditional"))
	  {
	    const char *requires = solv_xmlparser_find_attr("requires", atts);
	    if (requires && *requires)
	      pd->condreq = pool_str2id(pool, requires, 1);
	  }
	else if (type && !strcmp(type, "mandatory"))
	  pd->reqtype = SOLVABLE_REQUIRES;
	else if (type && !strcmp(type, "optional"))
	  pd->reqtype = SOLVABLE_SUGGESTS;
	break;
      }

    default:
      break;
    }
}
