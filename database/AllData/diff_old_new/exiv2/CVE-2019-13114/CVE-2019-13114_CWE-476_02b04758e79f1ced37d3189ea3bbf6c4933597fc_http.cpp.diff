diff --git a/src/http.cpp b/src/http.cpp
index ae89eb3450..dc5f0ac97c 100644
--- a/src/http.cpp
+++ b/src/http.cpp
@@ -214,8 +214,8 @@ int Exiv2::http(Exiv2::Dictionary& request, Exiv2::Dictionary& response, std::st
     errors = "";
     int result = 0;
 
-    ////////////////////////////////////
-    // Windows specific code
+////////////////////////////////////
+// Windows specific code
 #ifdef WIN32
     WSADATA wsaData;
     WSAStartup(MAKEWORD(2, 2), &wsaData);
@@ -345,10 +345,14 @@ int Exiv2::http(Exiv2::Dictionary& request, Exiv2::Dictionary& response, std::st
             if (bSearching) {
                 // search for the body
                 for (size_t b = 0; bSearching && b < lengthof(blankLines); b++) {
-                    if (strstr(buffer, blankLines[b])) {
+                    const char* blankLinePos = strstr(buffer, blankLines[b]);
+                    if (blankLinePos) {
                         bSearching = false;
-                        body = (int)(strstr(buffer, blankLines[b]) - buffer) + strlen(blankLines[b]);
-                        status = atoi(strchr(buffer, ' '));
+                        body = blankLinePos - buffer + strlen(blankLines[b]);
+                        const char* firstSpace = strchr(buffer, ' ');
+                        if (firstSpace) {
+                            status = atoi(firstSpace);
+                        }
                     }
                 }
 
@@ -359,9 +363,19 @@ int Exiv2::http(Exiv2::Dictionary& request, Exiv2::Dictionary& response, std::st
                 int i = 0;  // initial byte in buffer
                 while (buffer[i] == N)
                     i++;
-                h = strchr(h + i, N) + 1;
+                h = strchr(h + i, N);
+                if (!h) {
+                    status = 0;
+                    break;
+                }
+                h++;
                 response[""] = std::string(buffer + i).substr(0, h - buffer - 2);
-                result = atoi(strchr(buffer, ' '));
+                const char* firstSpace = strchr(buffer, ' ');
+                if (!firstSpace) {
+                    status = 0;
+                    break;
+                }
+                result = atoi(firstSpace);
                 char* c = strchr(h, C);
                 char* first_newline = strchr(h, N);
                 while (c && first_newline && c < first_newline && h < buffer + body) {
