diff --git a/Source/C++/Core/Ap4StszAtom.cpp b/Source/C++/Core/Ap4StszAtom.cpp
index a5a1f0547..faa61a0ce 100644
--- a/Source/C++/Core/Ap4StszAtom.cpp
+++ b/Source/C++/Core/Ap4StszAtom.cpp
@@ -69,28 +69,32 @@ AP4_StszAtom::AP4_StszAtom(AP4_UI32        size,
                            AP4_UI08        version,
                            AP4_UI32        flags,
                            AP4_ByteStream& stream) :
-    AP4_Atom(AP4_ATOM_TYPE_STSZ, size, version, flags)
+    AP4_Atom(AP4_ATOM_TYPE_STSZ, size, version, flags),
+    m_SampleSize(0),
+    m_SampleCount(0)
 {
+    if (size < AP4_FULL_ATOM_HEADER_SIZE + 8) {
+        return;
+    }
+
     stream.ReadUI32(m_SampleSize);
-    stream.ReadUI32(m_SampleCount);
+    AP4_UI32 sample_count;
+    stream.ReadUI32(sample_count);
     if (m_SampleSize == 0) { // means that the samples have different sizes
         // check for overflow
-        if (m_SampleCount > (size-8)/4) {
-            m_SampleCount = 0;
+        if (m_SampleCount > (size - AP4_FULL_ATOM_HEADER_SIZE - 8) / 4) {
             return;
         }
         
         // read the entries
-        AP4_Cardinal sample_count = m_SampleCount;
-        m_Entries.SetItemCount(sample_count);
-        unsigned char* buffer = new unsigned char[sample_count*4];
+        unsigned char* buffer = new unsigned char[sample_count * 4];
         AP4_Result result = stream.Read(buffer, sample_count*4);
         if (AP4_FAILED(result)) {
             delete[] buffer;
-            m_Entries.Clear();
-            m_SampleCount = 0;
             return;
         }
+        m_SampleCount = sample_count;
+        m_Entries.SetItemCount((AP4_Cardinal)sample_count);
         for (unsigned int i=0; i<sample_count; i++) {
             m_Entries[i] = AP4_BytesToUInt32BE(&buffer[i*4]);
         }
