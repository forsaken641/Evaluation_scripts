static int skcipher_accept_parent(void *private, struct sock *sk)\n{\n\rstruct skcipher_ctx *ctx;\n\rstruct alg_sock *ask = alg_sk(sk);\n\runsigned int len = sizeof(*ctx) + crypto_skcipher_reqsize(private);\n\n\rctx = sock_kmalloc(sk, len, GFP_KERNEL);\n\rif (!ctx)\n\rreturn -ENOMEM;\n\n\rctx->iv = sock_kmalloc(sk, crypto_skcipher_ivsize(private),\n\r       GFP_KERNEL);\n\rif (!ctx->iv) {\n\rsock_kfree_s(sk, ctx, len);\n\rreturn -ENOMEM;\n\r}\n\n\rmemset(ctx->iv, 0, crypto_skcipher_ivsize(private));\n\n\rINIT_LIST_HEAD(&ctx->tsgl);\n\rctx->len = len;\n\rctx->used = 0;\n\rctx->more = 0;\n\rctx->merge = 0;\n\rctx->enc = 0;\n\ratomic_set(&ctx->inflight, 0);\n\raf_alg_init_completion(&ctx->completion);\n\n\rask->private = ctx;\n\n\rskcipher_request_set_tfm(&ctx->req, private);\n\rskcipher_request_set_callback(&ctx->req, CRYPTO_TFM_REQ_MAY_BACKLOG,\n\r      af_alg_complete, &ctx->completion);\n\n\rsk->sk_destruct = skcipher_sock_destruct;\n\n\rreturn 0;\n}
